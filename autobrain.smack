;; smacklisp code for auto-brain
(defun feeb-in-sight ()
  (find-if (lambda (sq)
             (member-if #'feeb-image-p sq))
           (vision-ahead)))

(defun fireball-in-sight ()
  (find-if (lambda (sq)
             (member-if #'fireball-image-p sq))
           (vision-ahead)))

(defun brain ()
  (let ((here (current-square)))
    (cond ((and (member :mushroom here)
                (< (feeb-energy)
                   (get-parm :maximum-energy)))
           :eat-mushroom)
          ((and (member :carcass here)
                (< (feeb-energy)
                   (get-parm :maximum-energy)))
           :eat-carcass)
          ((and (ready-to-fire-p)
                (> (- (feeb-energy)
                      (get-parm :flame-energy))
                   10)
                (feeb-in-sight))
           :flame)
          ((and (not (member :rock (left-square)))
                (not (eq :turn-right (feeb-last-move)))
                (not (find-if #'fireball-image-p (left-square)))
                (or (member :mushroom (left-square))
                    (> 0.3 (random 1.0))))
           :turn-left)
          ((and (not (member :rock (right-square)))
                (not (eq :turn-left (feeb-last-move)))
                (not (find-if #'fireball-image-p (right-square)))
                (or (member :mushroom (right-square))
                    (> 0.3 (random 1.0))))
           :turn-right)
          ((and (> (length (vision-ahead)) 0)
                (not (fireball-in-sight)))
           :move-forward)
          ((not (member :rock (rear-square)))
           :turn-around)
          ((not (member :rock (right-square)))
           :turn-right)
          ((not (member :rock (left-square)))
           :turn-left)
          (t :wait))))
